{"version":3,"sources":["assets/singlescreen.png","assets/myAvatarPNGSMALL.png","assets/myAvatarPNG300.png","pages/Home/ProjectBox.tsx","pages/Home/Home.tsx","pages/Projects.tsx","pages/Contact.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["module","exports","Wrapper","styled","div","HeaderText","p","Box","ProjectBox","img","Image2","this","props","image","projectname","projecttext","React","Component","Header","SubHeaderText","HeaderImage","myAvatarPNG300","myAvatarPNGSMALL","ProjectWrapper","AboutWrapper","ProjectHeader","Home","singlescreen","Projects","Contact","MenuWrapper","MenuLink","SayButton","button","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,k+BCK3C,IAAMC,EAAUC,IAAOC,IAAV,KAKPC,EAAaF,IAAOG,EAAV,KAKVC,EAAMJ,IAAOC,IAAV,KA4CMI,GApCDL,IAAOM,IAAV,K,uKAiBT,IAAMC,EAASP,IAAOM,IAAV,IAKYE,KAAKC,MAAMC,OAGjC,OACM,kBAACX,EAAD,KACI,kBAACG,EAAD,KAAaM,KAAKC,MAAME,aACxB,kBAACJ,EAAD,MACA,kBAACH,EAAD,KAAMI,KAAKC,MAAMG,kB,GAfNC,IAAMC,Y,smEC5B/B,IAAMf,EAAUC,IAAOC,IAAV,KAOPc,EAASf,IAAOC,IAAV,KASNC,EAAaF,IAAOC,IAAV,KAkBVe,EAAgBhB,IAAOC,IAAV,KAoBbgB,EAAcjB,IAAOM,IAAV,IAKSY,IASEC,KAItBC,EAAiBpB,IAAOC,IAAV,KAMdoB,EAAerB,IAAOC,IAAV,KAQZqB,EAAgBtB,IAAOG,EAAV,KAqDJoB,E,uKAvCX,OACI,kBAAC,EAAD,KACE,kBAACR,EAAD,KACE,kBAAC,EAAD,SATE,wDASF,KACA,kBAACC,EAAD,SATK,oDASL,KACA,kBAACC,EAAD,OAEF,kBAACK,EAAD,cACA,kBAACD,EAAD,KACE,kBAAC,EAAD,CACAV,YAAY,WACZC,YAAY,OACZF,MAAOc,OAGT,kBAACF,EAAD,iBACA,kBAACF,EAAD,KACI,kBAAC,EAAD,CACET,YAAY,WACZC,YAAY,OACZF,MAAOc,MAET,kBAAC,EAAD,CACEb,YAAY,WACZC,YAAY,OACZF,MAAOc,MAET,kBAAC,EAAD,CACEb,YAAY,WACZC,YAAY,OACZF,MAAOc,Y,GAhCJV,aC/FJW,E,uKARX,OACI,6BACE,6C,GAJaX,aCURY,E,uKARX,OACI,6BACE,4C,GAJYZ,a,shCCOtB,IAAMf,EAAUC,IAAOC,IAAV,KAIP0B,GAAc3B,IAAOC,IAAV,KAgBX2B,GAAW5B,IAAOG,EAAV,KAOR0B,GAAY7B,IAAO8B,OAAV,KAuCAC,G,uKAnBX,OACF,kBAAC,EAAD,KACE,kBAAC,IAAD,KACI,kBAACJ,GAAD,KACA,kBAAC,IAAD,CAAMK,GAAI,YAAa,kBAACH,GAAD,mBACvB,kBAAC,IAAD,CAAMG,GAAI,aAAc,kBAACJ,GAAD,kBACxB,kBAAC,IAAD,CAAMI,GAAI,KAAV,IAAiB,kBAACJ,GAAD,aAAjB,MAEE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAK,YAAYC,UAAWV,IACnC,kBAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWT,W,GAb9BZ,aC1CEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dce2dda9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/singlescreen.ddbfa5cf.png\";","module.exports = __webpack_public_path__ + \"static/media/myAvatarPNGSMALL.51e60789.png\";","module.exports = __webpack_public_path__ + \"static/media/myAvatarPNG300.b00119ed.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nconst Wrapper = styled.div`\r\n  width-max: 100vw;\r\n  height-max: 100wh;\r\n  margin: 10px;\r\n`;\r\nconst HeaderText = styled.p`\r\n  font-size: 30px;\r\n  color: #333;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  height: 30vh;\r\n  width: 80vw;\r\n  background-color: #2A629F;\r\n  box-shadow: 9px 10px 21px 2px rgba(42,98,159,1);\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  position: absolute;\r\n  height: 280px;\r\n  width: 280px;\r\n  \r\n`;\r\n//background-image: url(${myImage});\r\n\r\ninterface ProjectBoxProps {\r\n  projectname: string,\r\n  projecttext: string,\r\n  image: any;\r\n}\r\n\r\nclass ProjectBox extends React.Component<ProjectBoxProps> {\r\n  render() {\r\n\r\n  const Image2 = styled.img`\r\n  height: 280px;\r\n  width: 280px;  \r\n  position: absolute;\r\n  object-fit:contain;\r\n  background-image: url(${this.props.image});\r\n`;\r\n\r\n    return (\r\n          <Wrapper>\r\n              <HeaderText>{this.props.projectname}</HeaderText>\r\n              <Image2></Image2>\r\n              <Box>{this.props.projecttext}</Box>\r\n              \r\n          </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectBox;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport ProjectBox from './ProjectBox';\r\nimport autor from '../../assets/autor.png';\r\nimport singlescreen from '../../assets/singlescreen.png';\r\nimport myAvatarPNGSMALL from '../../assets/myAvatarPNGSMALL.png';\r\nimport myAvatarPNG300 from '../../assets/myAvatarPNG300.png';\r\nimport Background from '../../assets/background.png';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  justify-content: center;\r\n\r\n  `;\r\nconst Header = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  height: 100vh;\r\n  background-color: #FFF;\r\n`;\r\n//background-image: url(${Background});\r\n  ///background-color: #333;\r\nconst HeaderText = styled.div`\r\n  margin-top: 15vh;\r\n  width: 99%;\r\n  font-family: 'Exo';\r\n  font-weight: 800;\r\n  font-size: 48px;\r\n  line-height: 60px;\r\n  text-align: center;\r\n  color: #141c3a;\r\n  @media only screen and (max-width: 400px) {\r\n    margin-top: 5vh;\r\n    font-size: 30px;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    font-size: 30px;\r\n  }\r\n`;\r\n\r\nconst SubHeaderText = styled.div`\r\n  width: 99%;\r\n  font-family: 'Exo';\r\n  font-weight: 300;\r\n  font-size: 20px;\r\n  line-height: 25px;\r\n  text-align: center;\r\n  color: #141c3a;\r\n  @media only screen and (max-width: 400px) {\r\n    font-size: 16px;\r\n    line-height: 25px;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    font-size: 18px;\r\n    line-height: 25px;\r\n  }\r\n`;\r\n\r\n\r\n// /text-align: center;\r\nconst HeaderImage = styled.img`\r\n  margin-top: 15vh;\r\n  border-radius: 50%;\r\n  height: 300px;\r\n  width: 300px;\r\n  background-image: url(${myAvatarPNG300});\r\n  box-shadow: 5px 5px 15px 5px #00000071;\r\n  align-self: center;\r\n  @media only screen and (max-width: 400px) {\r\n    margin-top: 7vh;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    height: 200px;\r\n    width: 200px;\r\n    background-image: url(${myAvatarPNGSMALL});\r\n  }\r\n`;\r\n\r\nconst ProjectWrapper = styled.div`\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: center;\r\n`;\r\n\r\nconst AboutWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: center;\r\n  border\r\n`;\r\n\r\nconst ProjectHeader = styled.p`\r\n  align-self: center;\r\n  font-size: 40px;\r\n  color: #333;\r\n`;\r\n\r\n\r\nconst name = '<CV> Michal Gulczynski </CV>';\r\nconst title = 'React Native and React, Mobile & Front-end Developer ';\r\nconst subtitle = 'I like creates dreams true, and I love this work.'\r\nconst abouttitle ='aa';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n        <Wrapper>\r\n          <Header>\r\n            <HeaderText> {title} </HeaderText>\r\n            <SubHeaderText> {subtitle} </SubHeaderText>\r\n            <HeaderImage></HeaderImage>\r\n          </Header>\r\n          <ProjectHeader>About</ProjectHeader>\r\n          <AboutWrapper>\r\n            <ProjectBox\r\n            projectname=\"Nextflix\"\r\n            projecttext=\"test\"\r\n            image={singlescreen}\r\n            />\r\n          </AboutWrapper>\r\n          <ProjectHeader>Projects</ProjectHeader>\r\n          <ProjectWrapper>\r\n              <ProjectBox\r\n                projectname=\"Nextflix\"\r\n                projecttext=\"test\"\r\n                image={singlescreen}\r\n              />\r\n              <ProjectBox\r\n                projectname=\"Nextflix\"\r\n                projecttext=\"test\"\r\n                image={singlescreen}\r\n              />\r\n              <ProjectBox\r\n                projectname=\"Nextflix\"\r\n                projecttext=\"test\"\r\n                image={singlescreen}\r\n              />\r\n          </ProjectWrapper>\r\n          \r\n        </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Projects</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Contact</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;","  \nimport './App.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport Projects from './pages/Projects';\nimport Contact from './pages/Contact';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin-top: 20px;\n`;\n\nconst MenuWrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  background-color: white;\n  border-color: grey;\n  border: 2px;\n  margin-top: 20px;\n  margin-right: 5vw;\n  margin-left: 5vw;\n  @media only screen and (max-width: 400px) {\n    margin-right: 10px;\n  }\n  @media only screen and (max-width: 600px) {\n  }\n`;\n\nconst MenuLink = styled.p`\n  font-family: 'Exo';\n  margin-left: 15px; \n  color: #141c3a;\n  font-weight: 600;\n`;\n\nconst SayButton = styled.button`\n    margin-left: 10px;\n    border-width: 2px;\n    font-weight: 400;\n    font-size: 18px;\n    padding: 12px;\n    background-color: transparent;\n    border-color: #7510F7;\n    color: #7510F7;\n    border-radius: 50px;\n    font-family: 'Exo';\n    outline: none;\n    :hover {\n      background-color: #7510F7;\n      color: white;\n    }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n  <Wrapper>\n    <Router>\n        <MenuWrapper>\n        <Link to={'/contact'} ><SayButton>Say Hello</SayButton></Link>\n        <Link to={'/projects'} ><MenuLink>Projects</MenuLink></Link>\n        <Link to={'/'} > <MenuLink>Home</MenuLink> </Link>\n        </MenuWrapper>\n          <Switch>\n              <Route exact path='/' component={Home} />\n              <Route path='/projects' component={Projects} />\n              <Route path='/contact' component={Contact} />\n          </Switch>\n      </Router>\n  </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n// stara wersja \n//function checkValidServiceWorker(swUrl: RequestInfo, config: any) {\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}